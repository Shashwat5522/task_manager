basePath: /
definitions:
  domain.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/domain.TaskStatus'
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  domain.TaskStatus:
    enum:
    - pending
    - in_progress
    - completed
    type: string
    x-enum-varnames:
    - TaskStatusTodo
    - TaskStatusInProgress
    - TaskStatusDone
  dto.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.BulkCompleteRequest:
    properties:
      task_ids:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - task_ids
    type: object
  dto.BulkCompleteResponse:
    properties:
      failed_count:
        type: integer
      failed_ids:
        items:
          type: string
        type: array
      success_count:
        type: integer
    type: object
  dto.CreateTaskRequest:
    properties:
      description:
        type: string
      status:
        $ref: '#/definitions/domain.TaskStatus'
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - status
    - title
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.TaskListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/dto.TaskResponse'
        type: array
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.TaskResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/domain.TaskStatus'
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.UpdateTaskRequest:
    properties:
      description:
        type: string
      status:
        $ref: '#/definitions/domain.TaskStatus'
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - status
    - title
    type: object
  dto.UserInfo:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
  description: Task Manager API for managing tasks and users.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Task Manager API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user and get JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - auth
  /api/v1/tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks for the authenticated user with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user
      parameters:
      - description: Create task request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /api/v1/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get a specific task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update an existing task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Update task request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - tasks
  /api/v1/tasks/bulk-complete:
    patch:
      consumes:
      - application/json
      description: Mark multiple tasks as completed concurrently
      parameters:
      - description: Bulk complete request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkCompleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BulkCompleteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark multiple tasks as completed
      tags:
      - tasks
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: JWT Bearer token authentication. Use "Bearer <token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
